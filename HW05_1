package hw05;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.*;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;


public class Computer extends JFrame {
	private JButton jbtOne = new JButton("1");
	private JButton jbtTwo = new JButton("2");
	private JButton jbtThree = new JButton("3");
	private JButton jbtFour = new JButton("4");
	private JButton jbtFive = new JButton("5");
	private JButton jbtSix = new JButton("6");
	private JButton jbtSeven = new JButton("7");
	private JButton jbtEight = new JButton("8");
	private JButton jbtNine = new JButton("9");
	private JButton jbtZero = new JButton("0");
	private JButton jbtAdd = new JButton("+");
	private JButton jbtSubtract = new JButton("-");
	private JButton jbtMultiply = new JButton("*");
	private JButton jbtExcept = new JButton("/");
	private JButton jbtDot = new JButton(".");
	private JButton jbtEqual = new JButton("=");
	private JButton jbtC = new JButton("C");
	private JButton jbtSin = new JButton("sin");
	private JButton jbtCos = new JButton("cos");
	private JButton jbtTan = new JButton("tan");
	private JButton jbtRoot = new JButton("âˆš");
	private JButton jbtPower = new JButton("^");
	private JButton jbtReciprocal = new JButton("1/x");
	private JButton jbtPi = new JButton("pi");
	private JTextField textField_output = new JTextField("0.");
	public Computer(){
		JPanel p1 = new JPanel(new GridLayout(4, 6));
		p1.add(jbtSeven);
		p1.add(jbtEight);
		p1.add(jbtNine);
		p1.add(jbtAdd);
		p1.add(jbtSin);
		p1.add(jbtRoot);
		p1.add(jbtFour);
		p1.add(jbtFive);
		p1.add(jbtSix);
		p1.add(jbtSubtract);
		p1.add(jbtCos);
		p1.add(jbtPower);
		p1.add(jbtOne);
		p1.add(jbtTwo);		
		p1.add(jbtThree);		
		p1.add(jbtMultiply);
		p1.add(jbtTan);
		p1.add(jbtReciprocal);
		p1.add(jbtZero);
		p1.add(jbtDot);
		p1.add(jbtEqual);
		p1.add(jbtExcept);
		p1.add(jbtC);
		p1.add(jbtPi);
		JPanel p2 = new JPanel(new BorderLayout());
		p2.add(textField_output,BorderLayout.NORTH);
		textField_output.setEditable(false);
		textField_output.setHorizontalAlignment(JTextField.RIGHT);
		p2.add(p1,BorderLayout.CENTER);
		add(p2, BorderLayout.CENTER);
		jbtSeven.addActionListener(new ButtonListener());
		jbtEight.addActionListener(new ButtonListener());
		jbtAdd.addActionListener(new ButtonListener());
		jbtFour.addActionListener(new ButtonListener());
		jbtFive.addActionListener(new ButtonListener());
		jbtSix.addActionListener(new ButtonListener());
		jbtSubtract.addActionListener(new ButtonListener());
		jbtOne.addActionListener(new ButtonListener());
		jbtTwo.addActionListener(new ButtonListener());
		jbtMultiply.addActionListener(new ButtonListener());
		jbtZero.addActionListener(new ButtonListener());
		jbtDot.addActionListener(new ButtonListener());
		jbtEqual.addActionListener(new ButtonListener());
		jbtExcept.addActionListener(new ButtonListener());
		jbtThree.addActionListener(new ButtonListener());
		jbtNine.addActionListener(new ButtonListener());
		jbtSin.addActionListener(new ButtonListener());
		jbtCos.addActionListener(new ButtonListener());
		jbtTan.addActionListener(new ButtonListener());
		jbtC.addActionListener(new ButtonListener());
		jbtRoot.addActionListener(new ButtonListener());
		jbtPower.addActionListener(new ButtonListener());
		jbtReciprocal.addActionListener(new ButtonListener());
		jbtPi.addActionListener(new ButtonListener());
	}
	boolean CanDot=true;
	String output="";
	double number1=0;
	double number2=0;
	String operationresult;
	int lastsign=0;
	boolean CanSign=true;
	private class ButtonListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent e){
			
			if (e.getSource()==jbtOne){
				if(textField_output.getText().equals("0")){
					output="";
				}
				output+="1";
				textField_output.setText(output);
				CanSign=true;
			}
			else if (e.getSource()==jbtTwo){
				if(textField_output.getText().equals("0")){
					output="";
				}
				output+="2";
				textField_output.setText(output);
				CanSign=true;
			}
			else if (e.getSource()==jbtThree){
				if(textField_output.getText().equals("0")){
					output="";
				}
				output+="3";
				textField_output.setText(output);
				CanSign=true;
			}
			else if (e.getSource()==jbtFour){
				if(textField_output.getText().equals("0")){
					output="";
				}
				output+="4";
				textField_output.setText(output);
				CanSign=true;
			}
			else if (e.getSource()==jbtFive){
				if(textField_output.getText().equals("0")){
					output="";
				}
				output+="5";
				textField_output.setText(output);
				CanSign=true;
			}
			else if (e.getSource()==jbtSix){
				if(textField_output.getText().equals("0")){
					output="";
				}
				output+="6";
				textField_output.setText(output);
				CanSign=true;
			}
			else if (e.getSource()==jbtSeven){
				if(textField_output.getText().equals("0")){
					output="";
				}
				output+="7";
				textField_output.setText(output);
				CanSign=true;
			}
			else if (e.getSource()==jbtEight){
				if(textField_output.getText().equals("0")){
					output="";
				}
				output+="8";
				textField_output.setText(output);
				CanSign=true;
			}
			else if (e.getSource()==jbtNine){
				if(textField_output.getText().equals("0")){
					output="";
				}
				output+="9";
				textField_output.setText(output);
				CanSign=true;
			}
			else if (e.getSource()==jbtZero){
				if(!textField_output.getText().equals("0")){
				output+="0";
				textField_output.setText(output);
				CanSign=true;
				}
			}
			else if (e.getSource()==jbtDot){
				if(CanDot){
					if(output.equals("")){
						output+="0.";
						CanSign=true;
						textField_output.setText(output);
					}
					else {
						output+=".";
						CanSign=true;
						textField_output.setText(output);
					}				
				CanDot=false;
				}
			}
			else if (e.getSource()==jbtAdd){
				if(CanSign){
				number1=Double.parseDouble(textField_output.getText());
				number2=operation(lastsign,number1,number2);
				output="";
				CanSign=false;
				operationresult=String.valueOf(number2);
				textField_output.setText(operationresult);
				}
				lastsign=1;

			}
			else if (e.getSource()==jbtSubtract){
				if(CanSign){
				number1=Double.parseDouble(textField_output.getText());
				number2=operation(lastsign,number1,number2);				
				output="";
				CanSign=false;
				operationresult=String.valueOf(number2);
				textField_output.setText(operationresult);
				}
				lastsign=2;
			}
			else if (e.getSource()==jbtMultiply){
				if(CanSign){
				number1=Double.parseDouble(textField_output.getText());
				number2=operation(lastsign,number1,number2);
				output="";
				CanSign=false;
				operationresult=String.valueOf(number2);
				textField_output.setText(operationresult);
				}
				lastsign=3;
			}
			else if (e.getSource()==jbtExcept){
				if(CanSign){
				number1=Double.parseDouble(textField_output.getText());
				number2=operation(lastsign,number1,number2);				
				output="";
				CanSign=false;
				operationresult=String.valueOf(number2);
				textField_output.setText(operationresult);
				}
				lastsign=4;
			}
			else if (e.getSource()==jbtEqual){
				number1=Double.parseDouble(textField_output.getText());
				number2=operation(lastsign,number1,number2);
				lastsign=0;
				output="";
				operationresult=String.valueOf(number2);
				textField_output.setText(operationresult);				
			}
			else if(e.getSource()==jbtSin){
				number1=Double.parseDouble(textField_output.getText());
				number2=operation(5,number1,number2);
				output="";
				CanSign=true;
				lastsign=0;
				operationresult=String.valueOf(number2);
				textField_output.setText(operationresult);
			}
			else if(e.getSource()==jbtCos){
				number1=Double.parseDouble(textField_output.getText());
				number2=operation(6,number1,number2);
				output="";
				CanSign=true;
				lastsign=0;
				operationresult=String.valueOf(number2);
				textField_output.setText(operationresult);	
			}
			else if(e.getSource()==jbtTan){
				number1=Double.parseDouble(textField_output.getText());
				number2=operation(7,number1,number2);
				output="";
				CanSign=true;
				lastsign=0;
				operationresult=String.valueOf(number2);
				textField_output.setText(operationresult);	
			}
			else if(e.getSource()==jbtC){
				number1=0;
				number2=0;
				lastsign=0;
				output="";
				CanDot=true;
				CanSign=true;
				textField_output.setText("0.");
			}
			else if(e.getSource()==jbtRoot){
				number1=Double.parseDouble(textField_output.getText());
				number2=operation(8,number1,number2);
				output="";
				CanSign=true;
				lastsign=0;
				operationresult=String.valueOf(number2);
				textField_output.setText(operationresult);
			}
			else if(e.getSource()==jbtPower){
				if(CanSign){
					number1=Double.parseDouble(textField_output.getText());
					number2=operation(lastsign,number1,number2);
					output="";
					CanSign=false;
					operationresult=String.valueOf(number2);
					textField_output.setText(operationresult);
					}
					lastsign=9;
			}
			else if(e.getSource()==jbtReciprocal){
				number1=Double.parseDouble(textField_output.getText());
				number2=operation(10,number1,number2);
				output="";
				CanSign=true;
				lastsign=0;
				operationresult=String.valueOf(number2);
				textField_output.setText(operationresult);
			}
			else if(e.getSource()==jbtPi){
				number1=0;
				number2=operation(11,number1,number2);
				output="";
				CanSign=true;
				lastsign=0;
				operationresult=String.valueOf(number2);
				textField_output.setText(operationresult);	
			}
		}
	}
	public double operation(int sign,double number1,double number2){
		double result=0;
		switch(sign){
			case 0:result=number1;break;
			case 1:result=number1+number2;break;
			case 2:result=number2-number1;break;
			case 3:result=number2*number1;break;
			case 4:result=number2/number1;break;
			case 5:result=Math.sin(number1);break;
			case 6:result=Math.cos(number1);break;
			case 7:result=Math.tan(number1);break;
			case 8:result=Math.sqrt(number1);break;
			case 9:result=Math.pow(number2,number1);break;
			case 10:result=1/number1;break;
			case 11:result=Math.PI;break;
		}
		if(result==-0)
			result=0;
		CanDot=true;
		return result;
	}
	public static void main(String[] args){
		Password frame1 = new Password();
		frame1.setLocationRelativeTo(null);
		frame1.setSize(200,100);
		frame1.setTitle("Computer");
		frame1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame1.setVisible(true);
	}
}
class Password extends JFrame{
	Computer frame2 = new Computer();
	private JTextField textField_Key = new JTextField();
	private JButton jbtKey = new JButton("Login");
	
	public Password(){
		JPanel p1 = new JPanel(new GridLayout(3, 1));
		p1.add(new JLabel("Enter the key"));
		p1.add(textField_Key);
	    p1.add(jbtKey);
	    add(p1, BorderLayout.CENTER);
	    jbtKey.addActionListener(new ButtonListener());
	}
	
	String key="0000";
	private class ButtonListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent e){
			if(textField_Key.getText().equals(key)){
				setVisible(false);
				frame2.setTitle("Computer");
				frame2.setSize(400,300);
				frame2.setLocationRelativeTo(null);
				frame2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				frame2.setVisible(true);
			}
			else
				textField_Key.setText("Wrong!Please enter again!");
			
			
		}
	}
}
